# ！需要在部署机设置所有节点host
# ！所有节点hostanme不应该包含“.”，见： https://tools.ietf.org/html/rfc952
# ！ 节点规划注意事项
# 1. 星盘节点不能与onxe部署在同一节点，80端口冲突；
# 2. fast common zookeeper与CDH不能部署在同节点，2181端口冲突。

# astrolabe + fast common（mysql、rabbitmq、zookeeper、kafka）
# 配置要求：4核8G
registry ansible_host=172.16.1.200   ansible_port=22     ansible_user=root   ansible_password=neokylin

# hubble
# 配置要求：8核32G
hubble  ansible_host=172.16.1.100 ansible_port=22 ansible_user=root ansible_password=centos

# cdh master
# 配置要求：8核32G
cdh01   ansible_host=172.16.1.40   ansible_port=22     ansible_user=root   ansible_password=greenplum
# cdh node + onex + whitehole
# 配置要求：8核16G
cdh02   ansible_host=172.16.1.41   ansible_port=22     ansible_user=root   ansible_password=greenplum
# cdh node
# 配置要求：8核16G
cdh03   ansible_host=172.16.1.42   ansible_port=22     ansible_user=root   ansible_password=greenplum

# greenplum节点列表
# The Greenplum Database host naming convention for the master host is mdw and for the standby master host is smdw.
# The segment host naming convention is sdwN where sdw is a prefix and N is an integer.
# For example, segment host names would be sdw1, sdw2 and so on.
# NIC bonding is recommended for hosts with multiple interfaces, but when the interfaces are not bonded,
# the convention is to append a dash (-) and number to the host name. For example, sdw1-1 and sdw1-2 are the two interface names for host sdw1.
# mdw      ansible_host=172.16.1.40   ansible_port=22     ansible_user=root   ansible_password=greenplum
# sdw01    ansible_host=172.16.1.41   ansible_port=22     ansible_user=root   ansible_password=greenplum
# sdw02    ansible_host=172.16.1.42   ansible_port=22     ansible_user=root   ansible_password=greenplum

########################################################################################################
# Common Groups
########################################################################################################

[registry_server]
registry chrony_role=server

[servers:children]
registry_server
fast_servers
cdh_servers
gp_servers
mysql_servers
rabbitmq_servers
zookeeper_servers
kafka_servers

[servers:vars]
# 安装Docker的节点，需要排除registry节点。因为安装Docker过程中，会重启Docker，导致部署过程中断。
docker_hosts=servers,!registry,!mysql,!rabbitmq,!zookeeper,!kafka # mysql、rabbitmq、zookeeper、kafka部署在registry节点时，需要同时排除这三个节点。

########################################################################################################
# Monitoring Groups
########################################################################################################

[monitoring-master]
registry

[monitoring-minion:children]
servers

########################################################################################################
# FAST Groups
########################################################################################################

[onex-basic]
cdh02 server_id=1 vrrp_interface_name=ens192 vrrp_state=MASTER vrrp_priority=100

[onex-extension]
cdh02

[onex_servers:children]
onex-basic
onex-extension

[fast-basic] # 未确认角色用途？
cdh02

[wh_servers]
cdh02

[hb_metagrid]
hubble

[hb_standalone]
hubble

[hb_kettle]
hubble

[hb_nifi]
hubble

[hb_stargate]
hubble

[hb_broker]
hubble

[hubble_servers:children]
hb_metagrid
hb_stargate
hb_kettle
hb_nifi
hb_broker

[fast_servers:children]
fast-basic
onex_servers
wh_servers
hubble_servers

########################################################################################################
# CDH Groups
########################################################################################################

[scm_server]
cdh01

[db_server]
cdh01

[krb5_server]
cdh01

[utility_servers:children]
scm_server
db_server
krb5_server

[gateway_servers]
cdh01 host_template=HostTemplate-Gateway

[edge_servers]
cdh01 host_template=HostTemplate-Edge role_ref_names=HDFS-HTTPFS-1

[master_servers]
cdh01 host_template=HostTemplate-Master1
# <host> host_template=HostTemplate-Master2
# <host> host_template=HostTemplate-Master3

[worker_servers]
cdh02
cdh03

[worker_servers:vars]
host_template=HostTemplate-Workers

[cdh_servers:children]
utility_servers
gateway_servers
master_servers
worker_servers

########################################################################################################
# Greenplum Groups
########################################################################################################

[gpmaster_servers]

[gpsegment_servers]

[gp_servers:children]
gpmaster_servers
gpsegment_servers

########################################################################################################
# Mysql Groups
########################################################################################################

[mysql]
registry

[mgr_primary]

[mgr_slave]

[mgr_servers:children]
mgr_primary
mgr_slave

[mysql_servers:children]
mysql
mgr_servers

########################################################################################################
# RabbitMQ Groups
########################################################################################################

[rabbitmq] # 单节点部署组
registry

[rabbitmq_first] # RabbitMQ集群第一个节点，用于初始集群的操作

[rabbitmq_node] # RabbitMQ其他节点，可以部署多个； node_type代表节点在集群中是 磁盘节点（disc）还是内存节点（ram）

[rabbitmq_servers:children]
rabbitmq
rabbitmq_first
rabbitmq_node

########################################################################################################
# Zookeeper Groups
########################################################################################################

[zookeeper] # 单节点部署组
registry

[zookeeper_ha] # 集群部署组

[zookeeper_servers:children]
zookeeper
zookeeper_ha

########################################################################################################
# Kafka Groups
########################################################################################################

[kafka] # 单节点部署组
registry

[kafka_ha] # 集群部署组

[kafka_servers:children]
kafka
kafka_ha

